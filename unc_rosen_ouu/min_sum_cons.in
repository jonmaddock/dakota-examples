# Min sum of constraints: simple optimisation

# Dakota Input File: unc_rosen_ouu.in
# Usage:
#   dakota -i unc_rosen_ouu.in -o unc_rosen_ouu.out
# Might require > outfile.out (not everything always in outfile otherwise)

environment
  # Define which method leads the study
  # HDF5 output
  results_output
    # Responses not in h5 output! Use -o option instead: only thing that contains results!
    # hdf5 
    # text Doesn't work either: blank!
    results_output_file "responses"

method
  # Requires licence
  # npsol_sqp
  conmin_mfd
    convergence_tolerance = 1.e-1

# Design variables
variables
  continuous_design = 2
    initial_point    -0.5   -0.5
    upper_bounds     2.0    3.0
    lower_bounds     -2.0   -1.0
    descriptors      "x"    "y"
    # Define certain uncertainties
  continuous_state = 2
      initial_state 0.0 0.0
      descriptors       "e1" "e2"

responses
  # Unconstrained opt: minimise constraint sum
  objective_functions = 1
  # Sum of constraints
  descriptors "cons"
  
  # Is this the reliability measure?
  # Feasible constraint sum?
  # nonlinear_inequality_constraints = 1
    # upper_bounds = 0.0
  
  numerical_gradients
    method_source dakota
    interval_type central
    fd_step_size = 1.e-1
  no_hessians


# Define interface to Rosenbrock script
interface
  fork
    labeled
    analysis_drivers = 'python unc_rosen_driver.py'
    parameters_file = 'params.in'
    results_file    = 'responses.out'
    work_directory named "runs/run"
      # directory_tag directory_save # Keep individual run dirs
      # file_save # save Dakota .in and .out files
      link_files = "run_dir_template/*"
    # Always request full data
    # deactivate active_set_vector 
